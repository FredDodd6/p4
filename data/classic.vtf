#
# Classic.vtf
#
# This pipeline starts with Illumina2Bam, and ends by running SplitBamByReadGroup to create separate BAM files for each sample.
#
#

{
"description":"The Classic Pipeline",
"nodes":[
	{
		"id":"illumina2bam",
		"type":"EXEC",
		"cmd":{"subst_param_name":"illumina2bam",
			"required":"yes",
			"subst_constructor":{
			"vals":[
					{"subst_param_name":"java_cmd","required":"no","default":"java"},
					"-Xmx1024m",
					"-jar",{"subst_param_name":"illumina2bam_jar","required":"no","default":"/software/npg/java_jars/Illumina2bam.jar"},
					{"subst_param_name":"i2b_intensity_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":["I",{"subst_param_name":"i2b_intensity_dir","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_basecalls_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":[
								"B",
								{"subst_param_name":"i2b_basecalls_dir",
									"required":"no",
									"subst_constructor":{
										"vals":[
											{"subst_param_name":"i2b_intensity_dir","required":"yes"},
											"/",
											{"subst_param_name":"i2b_basecalls_dir_suffix","required":"no","default":"BaseCalls"}
										],
										"postproc":{"op":"concat","pad":""}
									}
								}
							],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_first_tile_flag",
						"required":"no",
						"subst_constructor":{
							"vals":["FIRST_TILE",{"subst_param_name":"i2b_first_tile","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_tile_limit_flag",
						"required":"no",
						"subst_constructor":{
							"vals":["TILE_LIMIT",{"subst_param_name":"i2b_tile_limit","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					"OUTPUT=/dev/stdout",
					{"subst_param_name":"i2b_lane_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":["L",{"subst_param_name":"i2b_lane","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_library_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":["LIBRARY_NAME",{"subst_param_name":"i2b_library_name","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_sample_alias_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":["SAMPLE_ALIAS",{"subst_param_name":"i2b_sample_alias","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					{"subst_param_name":"i2b_study_name_flag",
						"required":"yes",
						"subst_constructor":{
							"vals":["STUDY_NAME",{"subst_param_name":"i2b_study_name","required":"no"}],
							"postproc":{"op":"concat","pad":"="}
						}
					},
					"COMPRESSION_LEVEL=0"
				],
				"postproc":{"op":"pack","pad":" "}
			}
		},
		"description":"Create the initial BAM file from the Illumina machine"
	},

    {
        "id":"decoder_metrics",
        "type":"OUTFILE",
        "name":{"subst_param_name":"decoder_metrics",
            "required":"yes",
            "subst_constructor":{
                "vals":[
                    {"subst_param_name":"output_dir","required":"no","default":"."},
                    "/",
                    {"subst_param_name":"rpt","required":"yes"},
                    "_",
                    {"subst_param_name":"decoder_metrics_name","required":"no","default":"decoder_metrics.log"}
                ],
                "postproc":{"op":"concat", "pad":""}
            }
        }
    },

	{
		"id":"bamindexdecoder",
		"type":"EXEC",
		"cmd":{"subst_param_name":"bamindexdecoder",
			"required":"yes",
			"subst_constructor":{
			"vals":[
					{"subst_param_name":"java_cmd","required":"no","default":"java"},
					"-Xmx1024m",
					"-jar",{"subst_param_name":"bamindexdecoder_jar","required":"no","default":"/software/npg/java_jars/BamIndexDecoder.jar"},
					"I=/dev/stdin",
					"O=/dev/stdout",
					"M=__METRICS_FILE__",
					{"subst_param_name":"barcode_file_flag",
						"required":"no",
						"subst_constructor":{
							"vals":["BARCODE_FILE",{"subst_param_name":"barcode_file","required":"yes"}],
							"postproc":{"op":"concat","pad":"="}
						}
					}
				],
				"postproc":{"op":"pack","pad":" "}
			}
		}
	},

	{
		"id":"splitter",
		"type":"EXEC",
		"cmd":{"subst_param_name":"splitter",
			"required":"yes",
			"subst_constructor":{
			"vals":[
					{"subst_param_name":"java_cmd","required":"no","default":"java"},
					"-Xmx1024m",
					"-jar",{"subst_param_name":"splitter_jar","required":"no","default":"/software/npg/java_jars/SplitBamByReadGroup.jar"},
					"I=/dev/stdin",
					"O=",
					{"subst_param_name":"split_prefix","required":"yes"}
				],
				"postproc":{"op":"pack","pad":" "}
			}
		},
		"description":"Split the BAM file into separate BAM files by Read Group"
	},

	{
		"id":"bamadapterfind",
		"type":"EXEC",
		"cmd":{"subst_param_name":"bamadapterfind",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					"bamadapterfind md5=1 md5filename=",
					{"subst_param_name":"rpt","required":"yes"},
					".bam.md5"
				],
				"postproc":{"op":"concat","pad":""}
			}
		},
		"description":"Find and mark the apaptors used by Illumina"
	},

	{
		"id":"filtered_bam",
		"type":"OUTFILE",
		"name":{"subst_param_name":"filtered_bam",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"output_dir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_filtered.bam"
				],
				"postproc":{"op":"concat","pad":""}
			}
		},
		"description":"BAM file after PhiX alignment and spatial filtering"
	},

	{
		"id":"reference_phix",
		"type":"INFILE",
		"name":{"subst_param_name":"reference_phix",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"reposdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"refname_phix","required":"yes"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"Prefix for Phix reference"
	},

	{
		"id":"filter_file",
		"type":"RAFILE",
		"name":{"subst_param_name":"filter_file",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"tmpdir","required":"yes"},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".filter"
				],
				"postproc":{"op":"concat","pad":""}
			}
		},
		"description":"Filter file for spatial filtering"
	},

	{
		"id":"prefilter",
		"type":"RAFILE",
		"name":{"subst_param_name":"prefilter",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"tmpdir","required":"yes"},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_prefilter.bam"
				],
				"postproc":{"op":"concat","pad":""}
			}
		}
	},

	{
		"id":"create_filter",
		"type":"EXEC",
		"cmd":"/nfs/users/nfs_s/srl/src/github/pb_calibration/bin/spatial_filter -c -q -F __FILTER__ /dev/stdin",
		"description":"Create a spatial filter"
	},

	{
		"id":"apply_filter",
		"type":"EXEC",
		"cmd":"/nfs/users/nfs_s/srl/src/github/pb_calibration/bin/spatial_filter -a -f -q -F __FILTER__ /dev/stdin",
		"description":"Apply a spatial filter"
	},

	{
		"id":"bam2fastq",
		"type":"EXEC",
		"cmd":["bamtofastq", "gz=1", "collate=1"]
	},

	{
		"id":"scramble",
		"type":"EXEC",
		"cmd":"scramble -I sam -O bam"
	},

	{
		"id":"tee_split",
		"type":"EXEC",
		"cmd":"mbuffer -f -q -m 5M -o __PIPE1__ -o __PIPE2__"
	},

	{
		"id":"tee_decode",
		"type":"RAFILE",
		"name":{"subst_param_name":"tee_decode",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"tmpdir","required":"yes"},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_tee_decode.bam"
				],
				"postproc":{"op":"concat","pad":""}
			}
		}
	},

	{
		"id":"bamcollate",
		"type":"EXEC",
		"cmd":["bamcollate2", "collate=2", "level=0"]
	},

	{
		"id":"bammerge",
		"type":"EXEC",
		"cmd":"bam12auxmerge level=0 rankstrip=1 ranksplit=0 zztoname=0 clipreinsert=1 __PREALN_BAM__"
	},

	{
		"id":"bamsort",
		"type":"EXEC",
		"cmd":"/software/npg/bin/bamsort SO=queryname level=0"
	},

	{
		"id":"bamsort2",
		"type":"EXEC",
		"cmd":"/software/npg/bin/bamsort SO=coordinate level=0"
	},

	{
		"id":"bwa_mem",
		"type":"EXEC",
		"cmd":{"subst_param_name":"bwa_mem_cmd_phix",
			"required":"yes",
			"subst_constructor":{
				"vals":[ "bwa0_6", "mem", "-p", "__REFERENCE_PHIX__", "__FQ_IN__" ],
				"postproc":{"op":"pack","pad":" "}
			}
		},
		"description":"Align to PhiX before splitting"
	}

],
"edges":[
	{
		"id":"illumina2bam_to_bamadapterfind",
		"from":"illumina2bam",
		"to":"bamadapterfind"
	},

	{
		"id":"bamadapterfind_to_decoder",
		"from":"bamadapterfind",
		"to":"bamindexdecoder"
	},

	{
		"id":"bamindexdecoder_to_tee",
		"from":"bamindexdecoder",
		"to":"bamcollate"
	},

	{
		"id":"decoder_to_metrics",
		"from":"bamindexdecoder:__METRICS_FILE__",
		"to":"decoder_metrics"
	},

	{
		"id":"tee_decode_to_collate",
		"from":"tee_decode",
		"to":"bammerge:__PREALN_BAM__"
	},

	{
		"id":"tee_decode_to_fastq",
		"from":"tee_decode",
		"to":"bam2fastq"
	},

	{
		"id":"ref_to_bwa_mem",
		"from":"reference_phix",
		"to":"bwa_mem:__REFERENCE_PHIX__"
	},

	{
		"id":"bam2fastq_to_bwa",
		"from":"bam2fastq",
		"to":"bwa_mem:__FQ_IN__"
	},

	{
		"id":"bwa_to_scramble",
		"from":"bwa_mem",
		"to":"scramble"
	},

	{
		"id":"scramble_to_tee",
		"from":"scramble",
		"to":"bamsort"
	},

	{
		"id":"sort_to_merge",
		"from":"bamsort",
		"to":"bammerge"
	},

	{
		"id":"collate_to_tmp",
		"from":"bamcollate",
		"to":"tee_decode"
	},

	{
		"id":"merge_to_prefilter",
		"from":"bammerge",
		"to":"prefilter"
	},

	{
		"id":"prefilter_to_create_filter",
		"from":"prefilter",
		"to":"create_filter"
	},

	{
		"id":"create_filter_to_filter",
		"from":"create_filter:__FILTER__",
		"to":"filter_file"
	},

	{
		"id":"tee_sf_to_apply",
		"from":"prefilter",
		"to":"apply_filter"
	},

	{
		"id":"filter_to_apply_filter",
		"from":"filter_file",
		"to":"apply_filter:__FILTER__"
	},

	{
		"id":"apply_to_tee",
		"from":"apply_filter",
		"to":"tee_split"
	},

	{
		"id":"tee_to_filtered_bam",
		"from":"tee_split:__PIPE1__",
		"to":"filtered_bam"
	},

	{
		"id":"tee_to_sort",
		"from":"tee_split:__PIPE2__",
		"to":"bamsort2"
	},

	{
		"id":"sort_to_split",
		"from":"bamsort2",
		"to":"splitter"
	}

]
}
