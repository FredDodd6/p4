{
"description":"any post-alignment processing required before passing through AlignmentFilter",
"subgraph_io":{
        "ports":{
                "inputs":{
                        "_stdin_":"tee_headerSQfix",
                        "reference_dict":"alterSQ_headerSQfix:__IN_PICARD_DICT__",
                        "no_align_bam":"bam12auxmerge:__NO_ALN_BAM__"
                },
                "outputs":{
                        "_stdout_":"bam12auxmerge"
                }
        }
},
"nodes":[
	{
		"id":"tee_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -vv -w 300 -m 5M __HEADER_FIX_OUT__ __FULL_BAM_OUT__",
		"comment":"get deadlock when tee used here"
	},
	{
		"id":"sam_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"samtools_view",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"samtools_executable","required":"no","default":"samtools"},
					"view",
					"-h",
					"-"
				],
				"postproc":{"op":"pack","pad":" "}
			}
		}
	},
	{
		"id":"alterSQ_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"perl -nle 'use strict; use autodie; our%sq; our$re; our$body; BEGIN{$body=0; $re=qr/^\\@SQ.*\\tSN:([^\\t]+)/; open(my$df,q(<),shift@ARGV); while(<$df>){chomp; if(/$re/){$sq{$1}=$_;} } close $df; } next if $body ; if(/$re/){$_=$sq{$1}||$_}elsif(/^[^@]/){open STDOUT,q(>),q(/dev/null); $body=1; next} print' __IN_PICARD_DICT__",
		"comment":"careful to not send SIGPIPE back to tee, yet ensure EOF to reheader as soon as header processed",
		"description":"where SN field in SQ header record matches one in the given dict file, replace that SQ record with that in the dict file"
	},
	{
		"id":"mbuffer_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"teepot -vv -m 5M -"
	},
	{
		"id":"reheader_headerSQfix",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"samtools_reheader",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"samtools_executable","required":"no","default":"samtools"},
					"reheader",
					"__IN_SAMHEADER__",
					"__IN_BAM__"
				],
				"postproc":{"op":"pack","pad":" "}
			}
		}
	},
	{
		"id":"bam12split",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bam12split verbose=0 level=0"
	},
	{
		"id":"bamsort_qname",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamsort SO=queryname level=0"
	},
	{
		"id":"bam12auxmerge",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bam12auxmerge level=0 rankstrip=1 ranksplit=0 zztoname=0 clipreinsert=1 __NO_ALN_BAM__"
	}
],
"edges":[
	{
		"id":"tee_headerSQfix_to_sam",
		"from":"tee_headerSQfix:__HEADER_FIX_OUT__",
		"to":"sam_headerSQfix"
	},
	{
		"id":"sam_headerSQfix_to_alterSQ",
		"from":"sam_headerSQfix",
		"to":"alterSQ_headerSQfix"
	},
	{
		"id":"alterSQ_headerSQfix_to_reheader",
		"from":"alterSQ_headerSQfix",
		"to":"reheader_headerSQfix:__IN_SAMHEADER__"
	},
	{
		"id":"tee_headerSQfix_to_mbuffer",
		"from":"tee_headerSQfix:__FULL_BAM_OUT__",
		"to":"mbuffer_headerSQfix"
	},
	{
		"id":"mbuffer_headerSQfix_to_reheader",
		"from":"mbuffer_headerSQfix",
		"to":"reheader_headerSQfix:__IN_BAM__"
	},
	{
		"id":"reheader_headerSQfix_to_bam12split",
		"from":"reheader_headerSQfix",
		"to":"bam12split"
	},
	{
		"id":"bam12split_to_bamsort_qname",
		"from":"bam12split",
		"to":"bamsort_qname"
	},
	{
		"id":"bsqn_to_bam12auxmerge",
		"from":"bamsort_qname",
		"to":"bam12auxmerge"
	}
]
}
