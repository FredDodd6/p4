{
"description":"A HiSeqX processing pipeline",
"version":"1.0",
"subgraph_io":{"ports":{"inputs":{"_stdin_":"scramble_sam_to_bam","reference_picard_dict":"alterSQ_headerSQfix:__IN_PICARD_DICT__","prealign":"bam12auxmerge:__PREALN_BAM__"},"outputs":{"_stdout_":"bam12auxmerge"}}},
"subst_params":[
	{"id":"rpt","required":"yes"},
	{"id":"tmpdir","required":"no","default":"."},
	{"id":"phix_or_target","required":"yes"},
	{
		"id":"bamsort_file_name",
		"required":"no",
		"default":"bamsort.bam",
		"subst_constructor":{
			"vals":[
				"bamsort_",
				{"subst":"phix_or_target"},
				"_",
				{"subst":"rpt"},
				".bam"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"bamsort_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"tmpdir"},
				"/",
				{"subst":"bamsort_file_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"tee_bwa_name",
		"required":"no",
		"default":"tee.bam",
		"subst_constructor":{
			"vals":[
				"tee_bwa_",
				{"subst":"phix_or_target"},
				"_",
				{"subst":"rpt"},
				".bam"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"tee_bwa",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"tmpdir"},
				"/",
				{"subst":"tee_bwa_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	}

],
"nodes":[
	{
		"id":"bamsort_file",
		"type":"RAFILE",
		"name":{"subst":"bamsort_file"}
	},
	{
		"id":"tee_bwa",
		"type":"RAFILE",
		"name":{"subst":"tee_bwa"}
	},
	{
		"id":"scramble_sam_to_bam",
		"type":"EXEC",
		"cmd":"scramble -I sam -O bam"
	},
	{
		"id":"sam_headerSQfix",
		"type":"EXEC",
		"cmd":"samtools view -h -"
	},
	{
		"id":"alterSQ_headerSQfix",
		"type":"EXEC",
		"cmd":["perl", "-nle", "use strict; use autodie; our%sq; our$re; our$body; BEGIN{$body=0; $re=qr/^\\@SQ.*\\tSN:([^\\t]+)/; open(my$df,q(<),shift@ARGV); while(<$df>){chomp; if(/$re/){$sq{$1}=$_;} } close $df; } next if $body ; if(/$re/){ if(my$nsq=$sq{$1}){my@ah=grep{/^AH:/}split qq(\\t),$_; $_=join qq(\\t),$nsq,@ah;} }elsif(/^[^@]/){open STDOUT,q(>),q(/dev/null); $body=1; next} print",{"port":"picard_dict", "direction":"in"}],
		"comment":"careful to not send SIGPIPE back to tee, yet ensure EOF to reheader as soon as header processed, separate arguments to avoid being wrapped by a shell (which might hang onto file handles breaking this intention)",

		"description":"where SN field in SQ header record matches one in the given dict file, replace that SQ record with that in the dict file"
	},
	{
		"id":"reheader_headerSQfix",
		"type":"EXEC",
		"cmd":"samtools reheader __IN_SAMHEADER__ __IN_BAM__"
	},
	{
		"id":"bam12split",
		"type":"EXEC",
		"cmd":"bam12split verbose=0 level=0"
	},
	{
		"id":"bamsort_qname",
		"type":"EXEC",
		"cmd":"bamsort SO=queryname level=0"
	},
	{
		"id":"bam12auxmerge",
		"type":"EXEC",
		"cmd":"bam12auxmerge level=0 rankstrip=1 ranksplit=0 zztoname=0 clipreinsert=1 __PREALN_BAM__"
	}
],
"edges":[
	{
		"id":"scramble_to_tee_headerSQfix",
		"from":"scramble_sam_to_bam",
		"to":"tee_bwa"
	},
	{
		"id":"tee_headerSQfix_to_sam",
		"from":"tee_bwa",
		"to":"sam_headerSQfix"
	},
	{
		"id":"sam_headerSQfix_to_alterSQ",
		"from":"sam_headerSQfix",
		"to":"alterSQ_headerSQfix"
	},
	{
		"id":"alterSQ_headerSQfix_to_reheader",
		"from":"alterSQ_headerSQfix",
		"to":"reheader_headerSQfix:__IN_SAMHEADER__"
	},
	{
		"id":"tee_headerSQfix_to_reheader",
		"from":"tee_bwa",
		"to":"reheader_headerSQfix:__IN_BAM__"
	},
	{
		"id":"reheader_headerSQfix_to_bam12split",
		"from":"reheader_headerSQfix",
		"to":"bam12split"
	},
	{
		"id":"bam12split_to_bamsort_qname",
		"from":"bam12split",
		"to":"bamsort_qname"
	},
	{
		"id":"bamsort_qname_to_bam12auxmerge",
		"from":"bamsort_qname",
		"to":"bamsort_file"
	},
	{
		"id":"bamsort_to_merge",
		"from":"bamsort_file",
		"to":"bam12auxmerge"
	}
]
}
